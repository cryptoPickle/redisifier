{"version":3,"sources":["../../src/api/index.js"],"names":["redis","require","defaultoptions","retry_strategy","options","error","code","Error","total_retry_time","attempt","undefined","Math","min","SimpleRedis","cb","port","host","password","_port","_host","_options","_password","_callback","_client","_createClient","client","createClient","auth","on","key","value","set","err","reply","get","json","hmset","hgetall","array","rpush","index","lrange","sadd","smembers","exists","del","second","expire"],"mappings":"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","file":"index.js","sourcesContent":["const redis = require(\"redis\");\n\nconst defaultoptions = {\n  retry_strategy: function(options) {\n    if (options.error && options.error.code === \"ECONNREFUSED\") {\n      //end reconnecting on specific error and flush all commands with individual\n      //error\n      return new Error(\"The server refused the connection\");\n    }\n    if (options.total_retry_time > 1000 * 60 * 60) {\n      //end reconnection after a specific timeout and flush all commands with\n      //individual error\n      return new Error(\"Retry time exhausted\");\n    }\n    if (options.attempt > 10) {\n      //end reconnecting with built in error\n      return undefined;\n    }\n    //reconnect after\n    return Math.min(options.attempt * 100, 3000);\n  }\n};\n\nclass SimpleRedis {\n  constructor({port, host, password, options = defaultoptions}, cb ) {\n    this._port = port;\n    this._host = host;\n    this._options = options;\n    this._password = password;\n    this._callback = null || cb;\n    this._client = this._createClient();\n  }\n  _createClient() {\n    const client = redis.createClient(this._port, this._host, this._options);\n    if (this._password) {\n      client.auth(this._password);\n    }\n    client.on(\"connect\", () => {\n      if(this._callback){\n        return this._callback('Redis/Connected');\n      }\n    });\n    return client;\n  }\n  setKeyValue(key, value, cb) {\n    return this._client.set([key, value], (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  getKeyValue(key, cb) {\n    return this._client.get(key, (err, reply) => {\n      if(cb) {\n        if (err) return (new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  setHash(key, json, cb) {\n    return this._client.hmset(key, json, (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  getHash(key, cb) {\n    return this._client.hgetall(key, (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  setList(key, array, cb) {\n    return this._client.rpush(key, array, (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  getList(key, cb, index = -1) {\n    return this._client.lrange(key, 0, index, (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null,reply);\n      }\n    });\n  }\n  createSet(key, array, cb) {\n    return this._client.sadd(key, array, (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  getSet(key, cb) {\n    this._client.smembers(key, (err, reply) => {\n      if(cb) {\n        if (err) return  cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  isExists(key, cb) {\n    this._client.exists(key, (err, reply) => {\n      if (err) throw new Error(err);\n      else {\n        if (reply === 1) return cb(true);\n        return cb(false);\n      }\n    });\n  }\n  deleteKey(key, cb) {\n    return this._client.del(key, (err, reply) => {\n      if(cb) {\n        if (err) throw new Error(err);\n        return cb(reply);\n      }\n    });\n  }\n  setExpireTime(key, second, cb) {\n    this._client.expire(key, second, (err, reply) => {\n      if (err) throw new Error(err);\n      return cb(reply);\n    });\n  }\n}\nexport default (options = {\n  port:  null,\n  host:  null,\n  password:  null,\n  options: defaultoptions\n}, cb) => new SimpleRedis(options, cb);\n"]}