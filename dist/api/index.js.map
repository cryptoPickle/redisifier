{"version":3,"sources":["../../src/api/index.js"],"names":["redis","require","defaultoptions","retry_strategy","options","error","code","Error","total_retry_time","attempt","undefined","Math","min","SimpleRedis","constructor","port","host","password","cb","_port","_host","_options","_password","_callback","_client","_createClient","client","createClient","auth","on","setKeyValue","key","value","set","err","reply","getKeyValue","get","setHash","json","hmset","getHash","hgetall","setList","array","rpush","getList","index","lrange","createSet","sadd","getSet","smembers","isExists","exists","deleteKey","del","setExpireTime","second","expire"],"mappings":"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","file":"index.js","sourcesContent":["const redis = require(\"redis\");\n\nconst defaultoptions = {\n  retry_strategy: function(options) {\n    if (options.error && options.error.code === \"ECONNREFUSED\") {\n      //end reconnecting on specific error and flush all commands with individual\n      //error\n      return new Error(\"The server refused the connection\");\n    }\n    if (options.total_retry_time > 1000 * 60 * 60) {\n      //end reconnection after a specific timeout and flush all commands with\n      //individual error\n      return new Error(\"Retry time exhausted\");\n    }\n    if (options.attempt > 10) {\n      //end reconnecting with built in error\n      return undefined;\n    }\n    //reconnect after\n    return Math.min(options.attempt * 100, 3000);\n  }\n};\n\nclass SimpleRedis {\n  constructor({port, host, password, options = defaultoptions}, cb ) {\n    this._port = port;\n    this._host = host;\n    this._options = options;\n    this._password = password;\n    this._callback = null || cb;\n    this._client = this._createClient();\n  }\n  _createClient() {\n    const client = redis.createClient(this._port, this._host, this._options);\n    if (this._password) {\n      client.auth(this._password);\n    }\n    client.on(\"connect\", () => {\n      if(this._callback){\n        return this._callback('Redis/Connected');\n      }\n    });\n    return client;\n  }\n  setKeyValue(key, value, cb) {\n    return this._client.set([key, value], (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  getKeyValue(key, cb) {\n    return this._client.get(key, (err, reply) => {\n      if(cb) {\n        if (err) return (new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  setHash(key, json, cb) {\n    return this._client.hmset(key, json, (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  getHash(key, cb) {\n    return this._client.hgetall(key, (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  setList(key, array, cb) {\n    return this._client.rpush(key, array, (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  getList(key, cb, index = -1) {\n    return this._client.lrange(key, 0, index, (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null,reply);\n      }\n    });\n  }\n  createSet(key, array, cb) {\n    return this._client.sadd(key, array, (err, reply) => {\n      if(cb) {\n        if (err) return cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  getSet(key, cb) {\n    this._client.smembers(key, (err, reply) => {\n      if(cb) {\n        if (err) return  cb(new Error(err));\n        return cb(null, reply);\n      }\n    });\n  }\n  isExists(key, cb) {\n    this._client.exists(key, (err, reply) => {\n      if (err) throw new Error(err);\n      else {\n        if (reply === 1) return cb(true);\n        return cb(false);\n      }\n    });\n  }\n  deleteKey(key, cb) {\n    return this._client.del(key, (err, reply) => {\n      if(cb) {\n        if (err) throw new Error(err);\n        return cb(reply);\n      }\n    });\n  }\n  setExpireTime(key, second, cb) {\n    this._client.expire(key, second, (err, reply) => {\n      if (err) throw new Error(err);\n      return cb(reply);\n    });\n  }\n}\nexport default (options = {\n  port:  null,\n  host:  null,\n  password:  null,\n  options: defaultoptions\n}, cb) => new SimpleRedis(options, cb);\n"]}