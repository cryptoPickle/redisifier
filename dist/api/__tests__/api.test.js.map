{"version":3,"sources":["../../../src/api/__tests__/api.test.js"],"names":["SimpleRedis","config","options","port","host","password","client","client2","beforeEach","deleteKey","describe","test","expect","_client","address","toBe","client3","reply","setKeyValue","err","getKeyValue","setHash","value1","value2","getHash","console","log","toEqual","setList","resp","getList","createSet","getSet"],"mappings":"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","file":"api.test.js","sourcesContent":["import SimpleRedis from \"../../index\";\nimport config from \"../../config\";\nlet options = {\n  port: config.port,\n  host: config.host,\n  password: config.password\n};\nconst client = SimpleRedis();\nconst client2 = SimpleRedis(options);\n\nbeforeEach(() => {\n  client2.deleteKey('myKey3');\n  client2.deleteKey('myKey21');\n  client2.deleteKey('myKey3222');\n  client2.deleteKey('myKeytest');\n  client2.deleteKey('myKey123123')\n  client2.deleteKey('myKey33212')\n\n})\n\ndescribe(\"Connection\", () => {\n  test(\"Client tries to connect 127.0.0.1:6379 for default\", () => {\n    expect(client._client.address).toBe(\"127.0.0.1:6379\");\n  });\n  test(\"Client connects the redis\", () => {\n    const client3 = SimpleRedis(options, reply => {\n      expect(reply).toBe(\"Redis/Connected\");\n    });\n  });\n});\n\n\n\ndescribe(\"Data Flow\", () => {\n  test(\"Set Key/Value\", () => {\n    client2.setKeyValue(\"myKey1\", \"test\", (err, reply) => {\n      return expect(reply).toBe(\"OK\");\n    });\n  });\n  test(\"Get Key/Value\", () => {\n    client2.getKeyValue(\"myKey1\", (err, reply) => {\n      return expect(reply).toBe(\"test\");\n    });\n  });\n  test(\"Set Hash\", () => {\n    client2.setHash(\n      \"myKey3\",\n      { value1: \"value2\", value2: \"value2\" },\n      (err, reply) => {\n        return expect(reply).toBe(\"OK\");\n      }\n    );\n  });\n  test(\"Get Hash\", () => {\n    client.setHash('test12312354',{ value1: \"value2\", value2: \"value2\" }, () => {\n      client2.getHash(\"test12312354\", (err, reply) => {\n        console.log(reply)\n        return expect(reply).toEqual({ value1: \"value2\", value2: \"value2\" });\n      });\n    })\n  });\n  test(\"Set List\", () => {\n    client2.deleteKey('myKey21')\n    client2.setList(\"myKey21\", [\"test\", \"test2\", \"test3\"], (err, reply) => {\n      expect(reply).toBe(3);\n    });\n  });\n  test(\"Get Lists\", () => {\n    client2.deleteKey('myKey3222', (err,resp) => {\n      client2.setList(\"myKey3222\", [\"simple\", \"redis\"], () => {\n        client.getList('myKey3222', (err,reply) => {\n          return expect(reply).toEqual([\"simple\", \"redis\"]);\n        })\n      })\n    })\n  });\n  test(\"Create Set\", () => {\n    client2.createSet(\n      \"myKeytest\",\n      [\"test1\", \"test2\", \"test3\"],\n       (err, reply) => {\n        return expect(reply).toBe(3);\n      }\n    );\n  });\n  test(\"Get Sets\", () => {\n    client2.createSet(\n      \"myKey123123\",\n      [\"test1\", \"test2\", \"test3\"],\n      () => {\n        client2.getSet('myKey123123', (err,reply) => {\n          return expect(reply).toEqual([\"test3\", \"test2\", \"test1\"])\n        })\n      }\n    );\n  });\n});\n"]}